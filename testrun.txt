(base) ian@ian-Latitude-E7440:~$ nano mean.f
(base) ian@ian-Latitude-E7440:~$ gfortran -ffree-form mean.f -o mean
(base) ian@ian-Latitude-E7440:~$ ./mean
 weeksum    28.0000000    
 mean    4.00000000    
  daily    7.00000000       6.00000000       5.00000000       4.00000000       3.00000000       2.00000000       1.00000000    
(base) ian@ian-Latitude-E7440:~$ cat mean.f
        real daily(7) 
        real mean 
        real weeksum
        integer i
        weeksum = 0
        mean = 0.0  
        daily(1)=7.0
        daily(2) =6.0
        daily(3) = 5.0
        daily(4) =4.0
        daily(5) =3.0
        daily(6)=2.0
        daily(7)=1.0
        do i = 1,7,1
        weeksum = weeksum + daily(i)
        end do
        print *, "weeksum ",weeksum
        mean = weeksum / 7.0
        print *, "mean ",mean
        print *, " daily ", daily
        end program
        
(base) ian@ian-Latitude-E7440:~$ sloccount mean.f
Have a non-directory at the top, so creating directory top_dir
Adding /home/ian/mean.f to top_dir
Categorizing files.
Finding a working MD5 command....
Found a working MD5 command.
Computing results.


SLOC	Directory	SLOC-by-Language (Sorted)
21      top_dir         fortran=21


Totals grouped by language (dominant language first):
fortran:         21 (100.00%)




Total Physical Source Lines of Code (SLOC)                = 21
Development Effort Estimate, Person-Years (Person-Months) = 0.00 (0.04)
 (Basic COCOMO model, Person-Months = 2.4 * (KSLOC**1.05))
Schedule Estimate, Years (Months)                         = 0.06 (0.75)
 (Basic COCOMO model, Months = 2.5 * (person-months**0.38))
Estimated Average Number of Developers (Effort/Schedule)  = 0.06
Total Estimated Cost to Develop                           = $ 468
 (average salary = $56,286/year, overhead = 2.40).
SLOCCount, Copyright (C) 2001-2004 David A. Wheeler
SLOCCount is Open Source Software/Free Software, licensed under the GNU GPL.
SLOCCount comes with ABSOLUTELY NO WARRANTY, and you are welcome to
redistribute it under certain conditions as specified by the GNU GPL license;
see the documentation for details.
Please credit this data as "generated using David A. Wheeler's 'SLOCCount'."
(base) ian@ian-Latitude-E7440:~$ gfortran -ffree-form  -S
gfortran: fatal error: no input files
compilation terminated.
(base) ian@ian-Latitude-E7440:~$ gfortran mean.f -ffree-form  -S
(base) ian@ian-Latitude-E7440:~$ gfortran mean.s -o means
(base) ian@ian-Latitude-E7440:~$ ./means
 weeksum    28.0000000    
 mean    4.00000000    
  daily    7.00000000       6.00000000       5.00000000       4.00000000       3.00000000       2.00000000       1.00000000    
(base) ian@ian-Latitude-E7440:~$ cat mean.s
	.file	"mean.f"
	.text
	.section	.rodata
.LC8:
	.string	"mean.f"
.LC9:
	.ascii	"weeksum "
.LC10:
	.ascii	"mean "
.LC11:
	.ascii	" daily "
	.text
	.type	MAIN__, @function
MAIN__:
.LFB0:
	.cfi_startproc
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$640, %rsp
	pxor	%xmm0, %xmm0
	movss	%xmm0, -40(%rbp)
	pxor	%xmm0, %xmm0
	movss	%xmm0, -36(%rbp)
	movss	.LC1(%rip), %xmm0
	movss	%xmm0, -32(%rbp)
	movss	.LC2(%rip), %xmm0
	movss	%xmm0, -28(%rbp)
	movss	.LC3(%rip), %xmm0
	movss	%xmm0, -24(%rbp)
	movss	.LC4(%rip), %xmm0
	movss	%xmm0, -20(%rbp)
	movss	.LC5(%rip), %xmm0
	movss	%xmm0, -16(%rbp)
	movss	.LC6(%rip), %xmm0
	movss	%xmm0, -12(%rbp)
	movss	.LC7(%rip), %xmm0
	movss	%xmm0, -8(%rbp)
	movl	$1, -4(%rbp)
.L3:
	cmpl	$7, -4(%rbp)
	setg	%al
	movzbl	%al, %eax
	testl	%eax, %eax
	jne	.L4
	movl	-4(%rbp), %eax
	cltq
	subq	$1, %rax
	movss	-32(%rbp,%rax,4), %xmm1
	movss	-40(%rbp), %xmm0
	addss	%xmm1, %xmm0
	movss	%xmm0, -40(%rbp)
	addl	$1, -4(%rbp)
	jmp	.L3
.L4:
	nop
	leaq	.LC8(%rip), %rax
	movq	%rax, -568(%rbp)
	movl	$17, -560(%rbp)
	movl	$128, -576(%rbp)
	movl	$6, -572(%rbp)
	leaq	-576(%rbp), %rax
	movq	%rax, %rdi
	call	_gfortran_st_write@PLT
	leaq	-576(%rbp), %rax
	movl	$8, %edx
	leaq	.LC9(%rip), %rcx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	_gfortran_transfer_character_write@PLT
	leaq	-40(%rbp), %rcx
	leaq	-576(%rbp), %rax
	movl	$4, %edx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	_gfortran_transfer_real_write@PLT
	leaq	-576(%rbp), %rax
	movq	%rax, %rdi
	call	_gfortran_st_write_done@PLT
	movss	-40(%rbp), %xmm0
	movss	.LC1(%rip), %xmm1
	divss	%xmm1, %xmm0
	movss	%xmm0, -36(%rbp)
	leaq	.LC8(%rip), %rax
	movq	%rax, -568(%rbp)
	movl	$19, -560(%rbp)
	movl	$128, -576(%rbp)
	movl	$6, -572(%rbp)
	leaq	-576(%rbp), %rax
	movq	%rax, %rdi
	call	_gfortran_st_write@PLT
	leaq	-576(%rbp), %rax
	movl	$5, %edx
	leaq	.LC10(%rip), %rcx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	_gfortran_transfer_character_write@PLT
	leaq	-36(%rbp), %rcx
	leaq	-576(%rbp), %rax
	movl	$4, %edx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	_gfortran_transfer_real_write@PLT
	leaq	-576(%rbp), %rax
	movq	%rax, %rdi
	call	_gfortran_st_write_done@PLT
	leaq	.LC8(%rip), %rax
	movq	%rax, -568(%rbp)
	movl	$20, -560(%rbp)
	movl	$128, -576(%rbp)
	movl	$6, -572(%rbp)
	leaq	-576(%rbp), %rax
	movq	%rax, %rdi
	call	_gfortran_st_write@PLT
	leaq	-576(%rbp), %rax
	movl	$7, %edx
	leaq	.LC11(%rip), %rcx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	_gfortran_transfer_character_write@PLT
	movq	$4, -608(%rbp)
	movq	$0, -624(%rbp)
	movq	$0, -616(%rbp)
	movq	$4, -624(%rbp)
	movb	$1, -612(%rbp)
	movb	$3, -611(%rbp)
	movq	$1, -592(%rbp)
	movq	$7, -584(%rbp)
	movq	$1, -600(%rbp)
	leaq	-32(%rbp), %rax
	movq	%rax, -640(%rbp)
	movq	$-1, -632(%rbp)
	leaq	-640(%rbp), %rsi
	leaq	-576(%rbp), %rax
	movl	$0, %ecx
	movl	$4, %edx
	movq	%rax, %rdi
	call	_gfortran_transfer_array_write@PLT
	leaq	-576(%rbp), %rax
	movq	%rax, %rdi
	call	_gfortran_st_write_done@PLT
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE0:
	.size	MAIN__, .-MAIN__
	.globl	main
	.type	main, @function
main:
.LFB1:
	.cfi_startproc
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$16, %rsp
	movl	%edi, -4(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-16(%rbp), %rdx
	movl	-4(%rbp), %eax
	movq	%rdx, %rsi
	movl	%eax, %edi
	call	_gfortran_set_args@PLT
	leaq	options.4.0(%rip), %rax
	movq	%rax, %rsi
	movl	$7, %edi
	call	_gfortran_set_options@PLT
	call	MAIN__
	movl	$0, %eax
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE1:
	.size	main, .-main
	.section	.rodata
	.align 16
	.type	options.4.0, @object
	.size	options.4.0, 28
options.4.0:
	.long	2116
	.long	4095
	.long	0
	.long	1
	.long	1
	.long	0
	.long	31
	.align 4
.LC1:
	.long	1088421888
	.align 4
.LC2:
	.long	1086324736
	.align 4
.LC3:
	.long	1084227584
	.align 4
.LC4:
	.long	1082130432
	.align 4
.LC5:
	.long	1077936128
	.align 4
.LC6:
	.long	1073741824
	.align 4
.LC7:
	.long	1065353216
	.ident	"GCC: (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0"
	.section	.note.GNU-stack,"",@progbits
(base) ian@ian-Latitude-E7440:~$ sloccount mean.s
Have a non-directory at the top, so creating directory top_dir
Adding /home/ian/mean.s to top_dir
Categorizing files.
Finding a working MD5 command....
Found a working MD5 command.
Computing results.


SLOC	Directory	SLOC-by-Language (Sorted)
215     top_dir         asm=215


Totals grouped by language (dominant language first):
asm:            215 (100.00%)




Total Physical Source Lines of Code (SLOC)                = 215
Development Effort Estimate, Person-Years (Person-Months) = 0.04 (0.48)
 (Basic COCOMO model, Person-Months = 2.4 * (KSLOC**1.05))
Schedule Estimate, Years (Months)                         = 0.16 (1.89)
 (Basic COCOMO model, Months = 2.5 * (person-months**0.38))
Estimated Average Number of Developers (Effort/Schedule)  = 0.25
Total Estimated Cost to Develop                           = $ 5,379
 (average salary = $56,286/year, overhead = 2.40).
SLOCCount, Copyright (C) 2001-2004 David A. Wheeler
SLOCCount is Open Source Software/Free Software, licensed under the GNU GPL.
SLOCCount comes with ABSOLUTELY NO WARRANTY, and you are welcome to
redistribute it under certain conditions as specified by the GNU GPL license;
see the documentation for details.
Please credit this data as "generated using David A. Wheeler's 'SLOCCount'."
(base) ian@ian-Latitude-E7440:~$ ^C
